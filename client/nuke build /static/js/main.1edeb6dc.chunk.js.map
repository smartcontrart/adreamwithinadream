{"version":3,"sources":["DWD_GOLD_mint.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","account","networkId","dropLive","walletWLspots","walletDreamBalance","walletAshBalance","tokensClaimed","transactionInProgress","userFeedback","priceInAsh","dropDate","Date","parse","dateNow","now","componentDidMount","a","window","ethereum","web3","Web3","currentProvider","setNetwork","getContractsInstances","setAccount","handleMintClick","amount","setState","ashInstance","methods","approve","adreamwithinadreamInstance","_address","send","from","mint","alert","this","eth","net","getId","deployedNetwork","adreamwithinadream","networks","Contract","abi","ash","getAccounts","accounts","getAccountsData","resetAccountData","parseInt","balanceOf","call","_tokensWhitelisted","parseFloat","_tokensClaimed","enable","error","console","log","Fragment","Math","floor","id","tokenNumber","Button","variant","onClick","Badge","text","bg","renderButton","myInterval","setInterval","secondsToDrop","timeConsidered","days","hours","minutes","seconds","Spinner","animation","availableToMint","renderTwoMintButtons","renderOneMintButton","renderClaimBadge","connectWallet","Alert","on","className","Row","loop","autoPlay","muted","src","Video","type","renderUserInterface","renderConnexionStatus","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1edeb6dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DWD_GOLD_mint.68a53bc7.mp4\";","import React, { Component } from \"react\";\nimport adreamwithinadream  from \"./contracts/adreamwithinadream.json\";\n// import ash  from \"./contracts/fakeASH.json\";\nimport ash  from \"./contracts/Ash.json\";\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Badge from 'react-bootstrap/Badge';\nimport Alert from 'react-bootstrap/Alert';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Video from \"./DWD_GOLD_mint.mp4\";\nimport Web3 from \"web3\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    account: null,\n    networkId: null,\n    dropLive: false,\n    walletWLspots: null,\n    walletDreamBalance: null,\n    walletAshBalance: null,\n    tokensClaimed: null,\n    transactionInProgress: false,\n    userFeedback: null,\n    priceInAsh: 15000000000000000000,\n    dropDate: Date.parse('01 Mar 2022 15:00:00 GMT'),\n    dateNow: Date.now()\n  }\n\n  componentDidMount = async () => {\n    if (window.ethereum) {\n      this.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      this.web3  = new Web3(window.web3.currentProvider);\n    };\n    if(this.web3){\n      await this.setNetwork();\n      await this.getContractsInstances();\n      await this.setAccount();\n    }\n  }\n\n  async getContractsInstances(){\n    this.networkId = await this.web3.eth.net.getId();\n    this.deployedNetwork = adreamwithinadream.networks[this.networkId];\n      this.adreamwithinadreamInstance = new this.web3.eth.Contract(\n        adreamwithinadream.abi,\n        1 && '0x57a567A3D179904fDD97476404F077C447193212'\n      )\n      this.ashInstance = new this.web3.eth.Contract(\n        ash.abi,\n        1 && '0x64D91f12Ece7362F91A6f8E7940Cd55F05060b92'\n      )\n  }\n\n  async setAccount(){\n    if(this.state.networkId === 1){\n      let accounts = await this.web3.eth.getAccounts();\n      this.setState({account: accounts[0]});\n      if(this.state.account) this.getAccountsData()\n    }else{\n      this.resetAccountData();\n    }\n  }\n\n  resetAccountData(){\n    this.setState({\n      account: null,\n      walletDreamBalance: null,\n      walletWLspots: null,\n      walletAshBalance: null,\n      tokensClaimed: null,\n    })\n  }\n\n  async setNetwork(){\n    if(this.web3){\n      let networkId = await this.web3.eth.net.getId();\n      this.setState({networkId: networkId})\n    }\n  }\n\n  async getAccountsData(){\n    if(this.state.networkId === 1){\n      this.setState({\n        walletDreamBalance: parseInt(await this.adreamwithinadreamInstance.methods.balanceOf(this.state.account).call()),\n        walletWLspots: parseInt(await this.adreamwithinadreamInstance.methods._tokensWhitelisted(this.state.account).call()),\n        walletAshBalance: parseFloat(await this.ashInstance.methods.balanceOf(this.state.account).call()),\n        tokensClaimed: parseInt(await this.adreamwithinadreamInstance.methods._tokensClaimed(this.state.account).call()),\n      });\n    }\n  }\n\n  async connectWallet(){\n    this.setState({transactionInProgress: true})\n    try{\n      window.ethereum.enable()\n    }catch(error){\n      console.log(error)\n    }\n    this.setState({transactionInProgress: false})\n  }\n\n  renderConnexionStatus(){\n    if(this.state.account){\n      return(\n        <React.Fragment>\n          <p>Your ash balance: {Math.floor(this.state.walletAshBalance/(10**18))}</p>\n          <p id='connexion_info'><small>connected as <b>{this.state.account}</b></small></p>\n\n        </React.Fragment>\n      )\n    }\n  }\n\n  handleMintClick = async(amount) => {\n    this.setState({\n      transactionInProgress: true,\n      userFeedback: \"...creating your dream...\"})\n    try{\n      await this.ashInstance.methods.approve(this.adreamwithinadreamInstance._address, this.state.priceInAsh * amount).send({from: this.state.account})\n      await this.adreamwithinadreamInstance.methods.mint(this.state.account, amount).send({from: this.state.account});\n    }catch(error){\n      alert('User rejected the transaction')\n    }\n    this.setAccount()\n    this.setState({transactionInProgress: false,\n      userFeedback: null})\n  }\n\n  renderButton(tokenNumber){\n    if(this.state.walletAshBalance >= tokenNumber * this.state.priceInAsh ){\n      return(\n        <Button id=\"mint_button\" variant='warning' onClick={() => this.handleMintClick(tokenNumber)}>Mint {tokenNumber} for {this.state.priceInAsh} Ash!</Button> \n      )\n    }else{\n      return(\n        <Badge id=\"wl_badge\" text=\"dark\" bg=\"light\">Not enough Ash for {tokenNumber}</Badge>\n      )\n    }\n  }\n\n  renderTwoMintButtons(){\n    return(\n      <React.Fragment>\n        {this.renderButton(1)}\n        <br/>\n        {this.renderButton(2)}\n    </React.Fragment>\n    )\n  }\n\n  renderOneMintButton(){\n    return(\n      <React.Fragment>\n        {this.renderButton(1)}\n      </React.Fragment>\n    )\n  }\n\n  renderClaimBadge(){\n    return <Badge id=\"wl_badge\" text=\"dark\" bg=\"light\">NFT Claimed</Badge>\n  }\n\n  startTimer(){\n    this.myInterval = setInterval(() => {\n      this.setState(({ dateNow: dateNow }) => ({\n        dateNow: Date.now()\n      }))\n    }, 1000)\n  }\n\n  renderTimer(){\n    let secondsToDrop = Math.floor((this.state.dropDate - this.state.dateNow)/1000);\n    if(secondsToDrop<=0) this.setState({dropLive: true})\n    let timeConsidered = 0\n    let days = Math.floor(secondsToDrop/(60*60*24))\n    timeConsidered += days*60*60*24\n    let hours = Math.floor((secondsToDrop-timeConsidered)/(60*60))\n    timeConsidered += hours*60*60\n    let minutes = Math.floor((secondsToDrop-timeConsidered)/(60))\n    timeConsidered += minutes*60\n    let seconds = (secondsToDrop-timeConsidered)\n    return ` ${days < 10 ? '0' + days : days} : ${hours < 10 ? '0' + hours : hours} : ${minutes < 10 ? '0' + minutes : minutes}  : ${seconds < 10 ? '0' + seconds : seconds} `\n  }\n\n  renderUserInterface(){\n    if(this.web3){\n      if(this.state.dropLive){\n        if(this.state.transactionInProgress){\n          return(\n            <React.Fragment>\n              <Spinner animation=\"grow\" variant=\"warning\"/>\n              <span>{this.state.userFeedback}</span>\n            </React.Fragment>\n          )\n        }else{\n          if(this.state.networkId !== 1){\n            return(<p>Please connect your wallet to Mainnet</p>)\n          }else if(!this.state.account){\n            return(\n              <Button id=\"connect_button\" variant='dark' onClick={() => this.connectWallet()}>Connect your wallet</Button> \n            )\n          }else{\n            let availableToMint = this.state.walletWLspots - this.state.tokensClaimed\n            if(availableToMint > 2){\n              if(this.state.walletDreamBalance === 0){\n                return this.renderTwoMintButtons();\n              }else if(this.state.walletDreamBalance === 1){\n                return this.renderOneMintButton();\n              }else{\n                return this.renderClaimBadge();\n              }\n            }\n            if(availableToMint === 2){\n                return this.renderTwoMintButtons();\n            }else if(availableToMint === 1 || availableToMint > 1 && this.state.walletDreamBalance === 1){\n              return this.renderOneMintButton();\n            }else{\n              if(this.state.walletWLspots) { //Doesn't work\n                return this.renderClaimBadge();\n              }else{\n                return(\n                  <Badge id=\"wl_badge\" text=\"dark\" bg=\"light\">You're not on the WL</Badge>\n                )\n              }\n            }\n          }\n        }\n      }else{\n        return(\n          <div>\n            Mint paused\n          </div>\n        )\n      }\n    }else{\n      return(\n        <Alert id=\"web3_alert\" variant=\"dark\">No Wallet detected</Alert>\n      )\n    }\n  }\n\n  render() {\n    if(this.web3 && this.state.dropLive){\n      window.ethereum.on('accountsChanged', async () => {\n        await this.setAccount()\n      })\n      window.ethereum.on('networkChanged', async (networkId) => {\n        await this.setNetwork(networkId)\n        await this.setAccount();\n      });\n    }\n    return (\n      <div className=\"App\">\n        <Row id=\"App_row\">\n          <Row id=\"title_row\">\n            <h3>\"a dream within a dream\"</h3>\n            <span>a dynamic $ASH exclusive drop by Mihai Grecu</span>\n          </Row>\n          <Row id=\"video_row\">\n            <video id=\"video_player\" loop autoPlay muted src={Video} type=\"video/mp4\" />\n          </Row>\n          <Row id=\"button_row\">\n            {this.renderUserInterface()}\n          </Row>\n          <Row id=\"about_row\">\n            {/* <span>A dream within a dream is a dynamic NFT.</span> */}\n            <span>15 ASH</span> \n            <span>Whitelist only</span> \n          </Row>\n          <Row id=\"connexion_status\">\n            {this.renderConnexionStatus()}\n          </Row>\n        </Row>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}